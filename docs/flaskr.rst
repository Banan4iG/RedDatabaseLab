.. _Flaskr: https://flask.palletsprojects.com/en/2.0.x/tutorial/
.. _СУБД Ред База Данных: https://reddatabase.ru

Разработка web-приложение на Flask
==================================

В данной лабораторной работе рассматривается пример создания простейшего веб-приложения, назвываемого Flaskr. Пользователи могут регистрироваться, входить в систему, создавать посты, редактировать и удалять свои посты.

За основу взята пошаговая инструкция с официального сайта `Flaskr`_, однако в качестве СУБД выступает встраиваемая версия российской `СУБД Ред База Данных`_.

Создание приложения
-------------------

Прежде всего необходимо создать каталог, в котором будет располагаться проект.

.. code-block:: bash

    $ mkdir redflaskr
    $ cd redflaskr

Теперь необходимо настроить виртуальное окружение для Python (Python virtual environment) и установить Flask и драйвер СУБД Ред База Данных.

Далее будем предполагать что вся работа выполняется в каталоге redflaskr. Все пути к файлам будем указывать относительно него.

Проекты на Python используют пакеты для организации кода и мы этим воспользуемся.

Каталог проекта будет содержать:

* flaskr: Пакет Python, содержащий код приложения и другие файлы.
* venv: Виртуальное окружение, в котором будет установлен Flask, драйвер СУБД fdb и другие зависимости.

Приложение Flask это объект (instance) класса Flask. Все, что связано с приложением (настройки, URL адреса, прочее) будет настраиваться в этом объекте.

Наиболее простой путь создания приложения - это создать глобальный объект непосредственно в начале программы, однако по мере роста проекта это может принести проблемы.

Вместо создания объекта глобально, мы будем создавать его внутри функции. Такая функция называется *фабрикой приложения* (application factory). Все настройки, регистрации и т.п. будут происходить внутри функции, после чего объект приложения будет возвращен.

Фабрика приложения
""""""""""""""""""

Создайте каталог ``flaskr``, а внутри файл ``__init__.py``, который содержит *фабрику приложения* и говорит Python, что катало ``flaskr`` должен рассматриваться как пакет.

.. code-block:: bash

    $ mkdir flaskr

``flaskr/__init__.py``

.. code-block:: python

    import os

    from flask import Flask

    def create_app(test_config=None):
        # create and configure the app
        app = Flask(__name__, instance_relative_config=True)
        app.config.from_mapping(
            SECRET_KEY='dev',
            DATABASE=os.path.join(app.instance_path, 'flaskr.fdb'),
            USER='sysdba',
            PASSWORD='masterkey',
            LIBRARY=os.path.join(app.root_path, 'rdb/libfbclient.so')
        )

        if test_config is None:
            # load the instance config, if it exists, when not testing
            app.config.from_pyfile('config.py', silent=True)
        else:
            # load the test config if passed in
            app.config.from_mapping(test_config)

        # ensure the instance folder exists
        try:
            os.makedirs(app.instance_path)
        except OSError:
            pass

        # a simple page that says hello
        @app.route('/hello')
        def hello():
            return 'Hello, World!'

        return app

``create_app`` это функция *фабрика приложения*. Позже она будет дополнена, но и сейчас она многое делает:

#. :code:`app = Flask(__name__, instance_relative_config=True)` создает объект приложения Flask:
    :__name__: имя текущего модуля Python. Приложению необходимо знать где оно располагается, чтобы установить некоторые пути.
    :instance_relative_config: говорит приложению, что файлы конфигурации размещаются относительно каталога ``instance``. Он размещается вне каталога ``flaskr`` и содержит локальные данные: конфигурационные файлы, БД.

#. :code:`app.config.from_mapping` устанавливает значения параметров конфигурации по умолчанию:
    :SECRET_KEY: используется классом Flask и расширениями для обеспечения безопасности хранимых данных. Значение ``dev`` позволяет удобно разрабатывать приложения, но должно быть заменено случайным значением при поставке приложения заказчику.
    :DATABASE: путь к файлу БД. БД размещается в каталоге ``instance``. В зависимости от нужд приложения, может быть любым, в том числе псевдонимом БД на удаленном сервере. В нашем случае мы воспользуемся встроенным сервером.
    :USER: Имя пользователя, от которого будет производиться соединение.
    :PASSWORD: Пароль. Для встроенного сервера игнорируется.
    :LIBRARY: путь до клиентской библиотеки ``libfbclient.so``, которую мы установим в следующей части.

#. :code:`app.config.from_pyfile` перезаписывает значения параметров конфигурации значениями из файла ``config.py`` каталога ``instance``, если он существует. Например, при поставке приложения в нем можно указать реальное значение ``SECRET_KEY``.

#. :code:`os.makedirs()` гарантирует существование каталога ``app.instance_path``. Flask не создает каталог автоматически, но он нужен для файла БД.

#. :code:`@app.route()` создает простой маршрут, чтобы убедиться что приложение работает, прежде чем продолжить его разрабатывать. Это связывает URL ``/hello`` и функцию, которая сформирует ответ. В данном случае строку 'Hello, World!'.

Запуск приложения
"""""""""""""""""

Теперь можно запустить приложение, используя команду :code:`flask`. Укажите Flask где искать приложение и запустите его в режиме разработчика.

.. warning:: Вы должны быть в каталоге redflaskr, но не в его подкаталогах.

Режим разработчика показывает интерактивный отладчик когда страница выбрасывает исключение и перезапускает сервер, когда вы делаете изменения в коде. Его можно оставить запущенным и просто обновлять страницу в браузере по мере разработки.

.. code-block:: bash

    $ export FLASK_APP=flaskr
    $ export FLASK_ENV=development
    $ flask run

Вы увидите вывод, подобный этому:

.. code-block:: console

  * Serving Flask app "flaskr"
  * Environment: development
  * Debug mode: on
  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
  * Restarting with stat
  * Debugger is active!
  * Debugger PIN: 855-212-761

Перейдите по адресу http://127.0.0.1:5000/hello в браузере и вы увидите сообщение "Hello, World!".

Работа с БД
-----------

